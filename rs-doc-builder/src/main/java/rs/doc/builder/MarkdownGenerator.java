package rs.doc.builder;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.Collections;
import java.util.List;

import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;

public class MarkdownGenerator {

	public static void generateMarkdown(List<Endpoint> endpoints, OutputStream os) throws FileNotFoundException, UnsupportedEncodingException {
		// we sort all the endpoints to guarantee their order (we're using reflection and the order is otherwise unstable). 
		Collections.sort(endpoints, Endpoint.COMPARATOR);
		
		// The file generated is a the root of cirrus-services
		try (PrintStream ps = new PrintStream(os, false, "UTF-8")) {
			ps.println("#REST API");
			ps.println("This document is machine generated by " + RsDocBuilder.class.getCanonicalName() + " do not edit this document.");
			
			for (Endpoint endpoint : endpoints) {
				describeEndpoint(endpoint, ps);
			}
		}
	}

	
	/**
	 * Write out markdown for an endpoint
	 * @param endpoint
	 * @param ps
	 */
	private static void describeEndpoint(Endpoint endpoint, PrintStream ps) {
		ps.println();
		ps.print("`" + endpoint.method + " " + endpoint.path + "`");
		if (endpoint.deprecated) {
			ps.println(" **TO BE DELETED**");
		} else {
			ps.println();
		}
		if (endpoint.description != null) {
			ps.println();
			ps.println(endpoint.description);
		}
		
		ps.println();
		
		describeParameters(ps, "Query", endpoint.queryParameters);
		describeParameters(ps, "Form", endpoint.formParameters);
		
		for (String produces : endpoint.produces) {
			ps.print("`");
			ps.print(produces);
			ps.println("`");
			ps.println();
		}
		try {
			
			Constructor<?> ctor = getNoArgConstructor(endpoint.returnType.getConstructors());
			if (ctor != null) {
				Object value = ctor.newInstance();
				if (endpoint.produces.contains("application/json")) {
					ObjectMapper om = new ObjectMapper();
					om.enable(SerializationFeature.INDENT_OUTPUT);
					ps.println("```");
					ps.println(om.writeValueAsString(value));
					ps.println("```");
					ps.println();
				}
				
				if (endpoint.produces.contains("application/xmls")) {
					ObjectMapper om = new XmlMapper();
					om.enable(SerializationFeature.INDENT_OUTPUT);
					ps.println("```");
					ps.println(om.writeValueAsString(value));
					ps.println("```");
					ps.println();
				}
			}
		} catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException
				| SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonGenerationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonMappingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	

	private static Constructor<?> getNoArgConstructor(Constructor<?>[] constructors) {
		for (Constructor<?> ctor : constructors) {
			if (ctor.getParameterTypes().length == 0) {
				return ctor;
			}
		}
		return null;
	}


	/**
	 * Write out markdown for a list of parameters
	 * @param ps
	 * @param name
	 * @param parameters
	 */
	private static void describeParameters(PrintStream ps, String name, List<Parameter> parameters) {
		if (parameters.size() > 0) {
			ps.println(name + ":");
			
			ps.println();
			for (Parameter parameter : parameters) {
				ps.print("* **" + parameter.name + "** (" + parameter.type.getSimpleName() + ")");
				if (parameter.description != null) {
					ps.println(" - " + parameter.description);
				} else {
					ps.println();
				}
			}
			ps.println();
		}
	}
}